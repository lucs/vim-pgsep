======================================================================
*pgsep.txt*              Plugin for handling custom page separator lines

Author:  Luc St-Louis <lucs@pobox.com>
License: Same terms as Vim itself

0. Contents                                             *pgsep_contents*

    |pgsep_summary|  1. Summary
    |pgsep_using|    2. Using
    |pgsep_navig|    3. Navigating
    |pgsep_supplied| 4. Supplied separators
    |pgsep_funcs|    5. Public functions

======================================================================
1. Summary                                               *pgsep_summary*

I like to put "page separator" lines in my files. These are special
lines that this plugin is made to navigate to. I can do a ‹Page down›
or ‹Page up› and the plugin will scroll the text so that the next or
previous page separator line and the cursor are placed at the top of
the screen. I can also ‹Insert› a separator line where the cursor
happens to be. You can define your own separator lines or use one of
the supplied ones.

A page separator is identified by its tag and it has a regex pattern
(so that we can navigate to it) and a line to print when we want to
insert a separator. Here for example is a separator line that starts
with a pound sign and continues with a space and many dashes: >

    tag     : ‹b›
    pattern : ‹^# -----›
    line    : ‹# ----------------›
<
This plugin provides a way to define and use such page separators and
supplies a bunch of predefined ones that I happen to use.

======================================================================
2. Using                                                   *pgsep_using*

You can define your own page separators (see |pgsep_funcs|), but you
might find one of the already supplied ones to be satisfactory.

For example, after having looked at the |pgsep_supplied|, you may decide
to use the separator whose tag is ‹b› for your Bash source files.
That will give you 70 character wide separator lines that look like
this:

    # ---------- … -----------

So when you have a buffer containing a Bash source file, you can call
this function to make the the ‹b› separator the one to use, both for
navigation and for insertion:

    :call PgSep_All('b')

If you always want your Bash files to use this separator, you can have
this for example in .config/nvim/ftplugin/sh.vim (for files recognized
as being shell scripts):

    PgSep_All('b')

From then on, in that buffer, these normal mode mappings will apply:

    <space>i    : Insert page separator line
    <space>j    : Go down to next page
    <space>k    : Go up to previous page

Also, the mapping ‹yuh› helps by echoing reminders of the other
available ‹yu⋯› commands and of all the built-in tags. It echoes a
line that looks like this:

    Help.Add.Rem.Line.Only.Main.Insr:Bash:C:Dos:⋯:teX:dZil

The other ‹yu⋯› mappings expect you to enter a tag and will then act
act accordingly:

        Add: Add tag's pattern to lines that can be navigated to.
    yua

        Remove: Remove tag's pattern from lines that can be navigated to.
    yur

        Line: Use tag's separator line for insertion.
    yul

        Only: Make the tag's pattern and line the only ones to use for
        navigation and insertion.
    yuo

        Main: Add tag's pattern to lines that can be navigated to and make
        its line the one to use for insertion.
    yum

        Insert: Insert that tag's separator line.
    yui

For example, entering ‹yuo› in normal mode will prompt like this:

    :emenu pgsep.only.

and you could for example enter ‹h›, resulting in:

    :emenu pgsep.only.h<cr>

and thus have Html as the only recognized separator line and as the
one to use for insertion.

======================================================================
3. Navigating                                              *pgsep_navig*

‹Go up› and ‹Go down› are normal-mapped respectively to ‹<space>j› and
‹<space>k›. ‹Insert› is mapped to ‹<space>i›.

For example, if we suppose the ‹b› separator shown earlier is active
and that our cursor is positioned at the ‹X› character, doing a ‹Go
Up› will change the window as shown, with the cursor landing at the
‹!›: >

  ┌────────────────────────┐      ┌────────────────────────┐
  │       ... .. . .  .    │      │       ... .. . .  .    │
  │       .... ........    │      │       .... ........    │
  │ ╔════════════════════╗ │      │       .  ..... .. .    │
  │ ║     .  ..... .. .  ║ │      │ ╔════════════════════╗ │
  │ ║ # ---------------- ║ │      │ ║ # ------!--------- ║ │
  │ ║   .. . .X.. .....  ║ │      │ ║   .. . .X.. .....  ║ │
  │ ║   ...... ......... ║ │      │ ║   ...... ......... ║ │
  │ ║ # ---------------- ║ │      │ ║ # ---------------- ║ │
  │ ║       .... ...     ║ │      │ ║       .... ...     ║ │
  │ ║       ..... .      ║ │      │ ║       ..... .      ║ │
  │ ║       ... ...      ║ │      │ ║       ... ...      ║ │
  │ ║ # ---------------- ║ │  =>  │ ║ # ---------------- ║ │
  │ ║     .  ....        ║ │      │ ║     .  ....        ║ │
  │ ║     ... .          ║ │      │ ║     ... .          ║ │
  │ ║ # ---------------- ║ │      │ ║ # ---------------- ║ │
  │ ╚════════════════════╝ │      │ ║            . ....  ║ │
  │              . ....    │      │ ╚════════════════════╝ │
  │              .. . .    │      │              .. . .    │
  │              .....     │      │              .....     │
  │   # ----------------   │      │   # ----------------   │
  │      ... ......        │      │      ... ......        │
  └────────────────────────┘      └────────────────────────┘
<
‹Go Down› from the cursor on the ‹Y› here would change like this: >

  ┌────────────────────────┐      ┌────────────────────────┐
  │       ... .. . .  .    │      │       ... .. . .  .    │
  │       .... ........    │      │       .... ........    │
  │ ╔════════════════════╗ │      │       .  ..... .. .    │
  │ ║     .  ..... .. .  ║ │      │   # ----------------   │
  │ ║ # ---------------- ║ │      │     .. . .... .Y...    │
  │ ║   .. . .... .Y...  ║ │      │     ...... .........   │
  │ ║   ...... ......... ║ │      │ ╔════════════════════╗ │
  │ ║ # ---------------- ║ │      │ ║ # -----------!---- ║ │
  │ ║       .... ...     ║ │      │ ║       .... ...     ║ │
  │ ║       ..... .      ║ │      │ ║       ..... .      ║ │
  │ ║       ... ...      ║ │      │ ║       ... ...      ║ │
  │ ║ # ---------------- ║ │  =>  │ ║ # ---------------- ║ │
  │ ║     .  ....        ║ │      │ ║     .  ....        ║ │
  │ ║     ... .          ║ │      │ ║     ... .          ║ │
  │ ║ # ---------------- ║ │      │ ║ # ---------------- ║ │
  │ ╚════════════════════╝ │      │ ║            . ....  ║ │
  │              . ....    │      │ ║            .. . .  ║ │
  │              .. . .    │      │ ║            .....   ║ │
  │              .....     │      │ ║ # ---------------- ║ │
  │   # ----------------   │      │ ╚════════════════════╝ │
  │      ... ......        │      │      ... ......        │
  └────────────────────────┘      └────────────────────────┘
<
And an ‹Insert› from the line with the cursor on ‹Z›: >

  ┌────────────────────────┐      ┌────────────────────────┐
  │       ... .. . .  .    │      │       ... .. . .  .    │
  │       .... ........    │      │       .... ........    │
  │ ╔════════════════════╗ │      │ ╔════════════════════╗ │
  │ ║     .  ..... .. .  ║ │      │ ║     .  ..... .. .  ║ │
  │ ║ # ---------------- ║ │      │ ║ # ---------------- ║ │
  │ ║   .. . .... .....  ║ │      │ ║   .. . .... .....  ║ │
  │ ║   ...... ......... ║ │      │ ║   ...... ......... ║ │
  │ ║ # ---------------- ║ │      │ ║ # ---------------- ║ │
  │ ║       .... ...     ║ │      │ ║       .... ...     ║ │
  │ ║       ..... .      ║ │      │ ║       ..... .      ║ │
  │ ║       .Z. ...      ║ │      │ ║ # -----!---------- ║ │
  │ ║ # ---------------- ║ │  =>  │ ║       .Z. ...      ║ │
  │ ║     .  ....        ║ │      │ ║ # ---------------- ║ │
  │ ║     ... .          ║ │      │ ║     .  ....        ║ │
  │ ║ # ---------------- ║ │      │ ║     ... .          ║ │
  │ ╚════════════════════╝ │      │ ╚════════════════════╝ │
  │              .. . .    │      │   # ----------------   │
  │              .....     │      │              .. . .    │
  │   # ----------------   │      │              .....     │
  │      ... ......        │      │   # ----------------   │
  └────────────────────────┘      └────────────────────────┘
<                               

======================================================================
4. Supplied separators                                  *pgsep_supplied*

This plugin supplies many built-in separators, constructed from this:

    Name    tag    Space?   Pfx  Mid Tail
    -------------------------------------
    Bash     b       1       #    -
    C        c       1       /*   -   */
    Dos      d       1       :-   -
    tExt     e       1       -    -
    Html     h       1       <!-- ·   -->
    vImhelp  i       0       =    =
    Java     j       1       //   -
    Lisp     l       1       ;    -
    tMplmojo m       1       %#   -
    vrOomx   o       1       #%   -
    sQl      q       1       --   -
    Tt2      t       1       [%#- -   -%]
    Vim      v       1       "    -
    teX      x       1       %    -
    dZil     z       1       ;-   -

For example, the ‹sQl› built-in separator line is 70 (hard coded
value) characters long and looks like this:

    -- ------------- … ---------------

that is, a Pfx (prefix) of ‹--›, a Space (currently, only vImhelp
separators have no space), and enough of Mid (middle) characters to
fill out a line of 70 characters; if theres is a Tail, the last
characters of the separator line will be those, preceded by a space.

Each buffer maintains its own set of page separators. Usually, there
is a single one for a given file type; for example, bash files might
simply use a separator that looks like this:

    # --------------…---------------

But sometimes it can be useful to have more than one. For example,
you might have lines like this for both PHP and HTML code in a .php
file:

    <!-- ············ … ············· -->
    // -------------- … -----------------

======================================================================
5. Public functions                                        *pgsep_funcs*

Use this function to define a page separator: >

    PgSep_New(
        ⟨tag⟩,
        ⟨page separator regex⟩,
        ⟨page separator line text⟩
    )
<
For example: >

    :call PgSep_New(
      \ 'b',
      \ '^# -----',
      \ '# ----------------------------------------'
    \)
<
This will place the definition in ‹g:PgSep_defs›: >

    g:PgSep_defs['b'] = {
        'patt':'^# -----',
        'line':'# ----------------------------------------'
    }
<
Other functions :

        Add tag's pattern to lines that can be navigated to.
    PgSep_Add (⟨tag⟩)

        Remove tag's pattern from lines that can be navigated to.
    PgSep_Rem (⟨tag⟩)

        Use tag's separator line for insertion.
    PgSep_Line (⟨tag⟩)

        Make the tag's pattern and line the only ones to use for
        navigation and insertion.
    PgSep_Only (⟨tag⟩)

        Add tag's pattern to lines that can be navigated to and make
        its line the one to use for insertion.
    PgSep_Main (⟨tag⟩)

        Insert tag's or default separator line.
    PgSep_Insr (⟨tag⟩?)

        Go up or down a page.
    PgSep_Move (❲j∣k❳)

        Have all tags's patterns as lines that can be navigated to
        and use the first one's line for insertion.
    PgSep_All (⟨tag⟩*)

======================================================================
vim: ft=help tw=70 ts=4 sts=4 sw=4 et :

